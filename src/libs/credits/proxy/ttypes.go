// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"
	"github.com/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type OPERATION_ACTOIN int64

const (
	OPERATION_ACTOIN_LOCKINCR     OPERATION_ACTOIN = 0
	OPERATION_ACTOIN_LOCKDECR     OPERATION_ACTOIN = 1
	OPERATION_ACTOIN_ROLLBACKLOCK OPERATION_ACTOIN = 2
	OPERATION_ACTOIN_UNLOCK       OPERATION_ACTOIN = 3
	OPERATION_ACTOIN_INCR         OPERATION_ACTOIN = 4
	OPERATION_ACTOIN_DECR         OPERATION_ACTOIN = 5
)

func (p OPERATION_ACTOIN) String() string {
	switch p {
	case OPERATION_ACTOIN_LOCKINCR:
		return "OPERATION_ACTOIN_LOCKINCR"
	case OPERATION_ACTOIN_LOCKDECR:
		return "OPERATION_ACTOIN_LOCKDECR"
	case OPERATION_ACTOIN_ROLLBACKLOCK:
		return "OPERATION_ACTOIN_ROLLBACKLOCK"
	case OPERATION_ACTOIN_UNLOCK:
		return "OPERATION_ACTOIN_UNLOCK"
	case OPERATION_ACTOIN_INCR:
		return "OPERATION_ACTOIN_INCR"
	case OPERATION_ACTOIN_DECR:
		return "OPERATION_ACTOIN_DECR"
	}
	return "<UNSET>"
}

func OPERATION_ACTOINFromString(s string) (OPERATION_ACTOIN, error) {
	switch s {
	case "OPERATION_ACTOIN_LOCKINCR":
		return OPERATION_ACTOIN_LOCKINCR, nil
	case "OPERATION_ACTOIN_LOCKDECR":
		return OPERATION_ACTOIN_LOCKDECR, nil
	case "OPERATION_ACTOIN_ROLLBACKLOCK":
		return OPERATION_ACTOIN_ROLLBACKLOCK, nil
	case "OPERATION_ACTOIN_UNLOCK":
		return OPERATION_ACTOIN_UNLOCK, nil
	case "OPERATION_ACTOIN_INCR":
		return OPERATION_ACTOIN_INCR, nil
	case "OPERATION_ACTOIN_DECR":
		return OPERATION_ACTOIN_DECR, nil
	}
	return OPERATION_ACTOIN(0), fmt.Errorf("not a valid OPERATION_ACTOIN string")
}

func OPERATION_ACTOINPtr(v OPERATION_ACTOIN) *OPERATION_ACTOIN { return &v }

type OPERATION_STATE int64

const (
	OPERATION_STATE_UNDEFINED OPERATION_STATE = 0
	OPERATION_STATE_UNDER     OPERATION_STATE = 1
	OPERATION_STATE_PARAMFAIL OPERATION_STATE = 2
	OPERATION_STATE_NOFAIL    OPERATION_STATE = 3
	OPERATION_STATE_ERROR     OPERATION_STATE = 4
	OPERATION_STATE_COMPLETED OPERATION_STATE = 5
	OPERATION_STATE_SYSBUSY   OPERATION_STATE = 6
	OPERATION_STATE_OPNOEXIST OPERATION_STATE = 7
	OPERATION_STATE_SUCCESS   OPERATION_STATE = 8
)

func (p OPERATION_STATE) String() string {
	switch p {
	case OPERATION_STATE_UNDEFINED:
		return "OPERATION_STATE_UNDEFINED"
	case OPERATION_STATE_UNDER:
		return "OPERATION_STATE_UNDER"
	case OPERATION_STATE_PARAMFAIL:
		return "OPERATION_STATE_PARAMFAIL"
	case OPERATION_STATE_NOFAIL:
		return "OPERATION_STATE_NOFAIL"
	case OPERATION_STATE_ERROR:
		return "OPERATION_STATE_ERROR"
	case OPERATION_STATE_COMPLETED:
		return "OPERATION_STATE_COMPLETED"
	case OPERATION_STATE_SYSBUSY:
		return "OPERATION_STATE_SYSBUSY"
	case OPERATION_STATE_OPNOEXIST:
		return "OPERATION_STATE_OPNOEXIST"
	case OPERATION_STATE_SUCCESS:
		return "OPERATION_STATE_SUCCESS"
	}
	return "<UNSET>"
}

func OPERATION_STATEFromString(s string) (OPERATION_STATE, error) {
	switch s {
	case "OPERATION_STATE_UNDEFINED":
		return OPERATION_STATE_UNDEFINED, nil
	case "OPERATION_STATE_UNDER":
		return OPERATION_STATE_UNDER, nil
	case "OPERATION_STATE_PARAMFAIL":
		return OPERATION_STATE_PARAMFAIL, nil
	case "OPERATION_STATE_NOFAIL":
		return OPERATION_STATE_NOFAIL, nil
	case "OPERATION_STATE_ERROR":
		return OPERATION_STATE_ERROR, nil
	case "OPERATION_STATE_COMPLETED":
		return OPERATION_STATE_COMPLETED, nil
	case "OPERATION_STATE_SYSBUSY":
		return OPERATION_STATE_SYSBUSY, nil
	case "OPERATION_STATE_OPNOEXIST":
		return OPERATION_STATE_OPNOEXIST, nil
	case "OPERATION_STATE_SUCCESS":
		return OPERATION_STATE_SUCCESS, nil
	}
	return OPERATION_STATE(0), fmt.Errorf("not a valid OPERATION_STATE string")
}

func OPERATION_STATEPtr(v OPERATION_STATE) *OPERATION_STATE { return &v }

type OperationCreditParameter struct {
	No     string           `thrift:"No,1" json:"No"`
	Uid    int64            `thrift:"Uid,2" json:"Uid"`
	Points int64            `thrift:"Points,3" json:"Points"`
	Desc   string           `thrift:"Desc,4" json:"Desc"`
	Action OPERATION_ACTOIN `thrift:"Action,5" json:"Action"`
	Ref    string           `thrift:"Ref,6" json:"Ref"`
	RefId  string           `thrift:"RefId,7" json:"RefId"`
}

func NewOperationCreditParameter() *OperationCreditParameter {
	return &OperationCreditParameter{}
}

func (p *OperationCreditParameter) GetNo() string {
	return p.No
}

func (p *OperationCreditParameter) GetUid() int64 {
	return p.Uid
}

func (p *OperationCreditParameter) GetPoints() int64 {
	return p.Points
}

func (p *OperationCreditParameter) GetDesc() string {
	return p.Desc
}

func (p *OperationCreditParameter) GetAction() OPERATION_ACTOIN {
	return p.Action
}

func (p *OperationCreditParameter) GetRef() string {
	return p.Ref
}

func (p *OperationCreditParameter) GetRefId() string {
	return p.RefId
}
func (p *OperationCreditParameter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OperationCreditParameter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.No = v
	}
	return nil
}

func (p *OperationCreditParameter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *OperationCreditParameter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Points = v
	}
	return nil
}

func (p *OperationCreditParameter) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Desc = v
	}
	return nil
}

func (p *OperationCreditParameter) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := OPERATION_ACTOIN(v)
		p.Action = temp
	}
	return nil
}

func (p *OperationCreditParameter) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Ref = v
	}
	return nil
}

func (p *OperationCreditParameter) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.RefId = v
	}
	return nil
}

func (p *OperationCreditParameter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperationCreditParameter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OperationCreditParameter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("No", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:No: %s", p, err)
	}
	if err := oprot.WriteString(string(p.No)); err != nil {
		return fmt.Errorf("%T.No (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:No: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.Uid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Uid: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Points", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Points: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Points)); err != nil {
		return fmt.Errorf("%T.Points (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Points: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Desc", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Desc: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Desc)); err != nil {
		return fmt.Errorf("%T.Desc (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Desc: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Action", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:Action: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Action)); err != nil {
		return fmt.Errorf("%T.Action (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:Action: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ref", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Ref: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ref)); err != nil {
		return fmt.Errorf("%T.Ref (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Ref: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RefId", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:RefId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RefId)); err != nil {
		return fmt.Errorf("%T.RefId (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:RefId: %s", p, err)
	}
	return err
}

func (p *OperationCreditParameter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationCreditParameter(%+v)", *p)
}

type Result_ struct {
	No              string          `thrift:"No,1" json:"No"`
	RemainingPoints int64           `thrift:"RemainingPoints,2" json:"RemainingPoints"`
	State           OPERATION_STATE `thrift:"State,3" json:"State"`
	Err             string          `thrift:"Err,4" json:"Err"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

func (p *Result_) GetNo() string {
	return p.No
}

func (p *Result_) GetRemainingPoints() int64 {
	return p.RemainingPoints
}

func (p *Result_) GetState() OPERATION_STATE {
	return p.State
}

func (p *Result_) GetErr() string {
	return p.Err
}
func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Result_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.No = v
	}
	return nil
}

func (p *Result_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RemainingPoints = v
	}
	return nil
}

func (p *Result_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := OPERATION_STATE(v)
		p.State = temp
	}
	return nil
}

func (p *Result_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Err = v
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("No", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:No: %s", p, err)
	}
	if err := oprot.WriteString(string(p.No)); err != nil {
		return fmt.Errorf("%T.No (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:No: %s", p, err)
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RemainingPoints", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:RemainingPoints: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RemainingPoints)); err != nil {
		return fmt.Errorf("%T.RemainingPoints (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:RemainingPoints: %s", p, err)
	}
	return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("State", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:State: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return fmt.Errorf("%T.State (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:State: %s", p, err)
	}
	return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Err", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Err: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Err)); err != nil {
		return fmt.Errorf("%T.Err (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Err: %s", p, err)
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}
