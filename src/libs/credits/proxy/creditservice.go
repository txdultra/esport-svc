// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"
	"libs/credits"

	"github.com/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type CreditService interface {
	// Parameters:
	//  - Ocp
	Do(ocp *OperationCreditParameter) (r *Result_, err error)
	// Parameters:
	//  - Uid
	GetCredit(uid int64) (r int64, err error)
}

type CreditServiceProxy struct{}

func (c *CreditServiceProxy) transforOperationAction(action OPERATION_ACTOIN) credits.CREDIT_OPERATION_ACTION {
	switch action {
	case OPERATION_ACTOIN_LOCKINCR:
		return credits.CREDIT_OPERATION_LOCKINCR
	case OPERATION_ACTOIN_LOCKDECR:
		return credits.CREDIT_OPERATION_LOCKDECR
	case OPERATION_ACTOIN_ROLLBACKLOCK:
		return credits.CREDIT_OPERATION_ROLLBACKLOCK
	case OPERATION_ACTOIN_UNLOCK:
		return credits.CREDIT_OPERATION_UNLOCK
	case OPERATION_ACTOIN_INCR:
		return credits.CREDIT_OPERATION_INCR
	case OPERATION_ACTOIN_DECR:
		return credits.CREDIT_OPERATION_DECR
	default:
		panic("操作方法未实现")
	}
}

func (c *CreditServiceProxy) transforOperationState(state credits.OPERATION_CREDIT_STATE) OPERATION_STATE {
	switch state {
	case credits.OPERATION_CREDIT_STATE_UNDEFINED:
		return OPERATION_STATE_UNDEFINED
	case credits.OPERATION_CREDIT_STATE_UNDER:
		return OPERATION_STATE_UNDER
	case credits.OPERATION_CREDIT_STATE_PARAMFAIL:
		return OPERATION_STATE_PARAMFAIL
	case credits.OPERATION_CREDIT_STATE_NOFAIL:
		return OPERATION_STATE_NOFAIL
	case credits.OPERATION_CREDIT_STATE_ERROR:
		return OPERATION_STATE_ERROR
	case credits.OPERATION_CREDIT_STATE_COMPLETED:
		return OPERATION_STATE_COMPLETED
	case credits.OPERATION_CREDIT_STATE_SYSBUSY:
		return OPERATION_STATE_SYSBUSY
	case credits.OPERATION_CREDIT_STATE_OPNOEXIST:
		return OPERATION_STATE_OPNOEXIST
	case credits.OPERATION_CREDIT_STATE_SUCCESS:
		return OPERATION_STATE_SUCCESS
	default:
		panic("不存在对应的状态")
	}
}

func (c *CreditServiceProxy) Do(ocp *OperationCreditParameter) (r *Result_, err error) {
	if ocp.Action != OPERATION_ACTOIN_ROLLBACKLOCK && ocp.Action != OPERATION_ACTOIN_UNLOCK {
		if ocp.Points <= 0 {
			return &Result_{
				No:              "",
				RemainingPoints: 0,
				State:           OPERATION_STATE_PARAMFAIL,
				Err:             "积分不能小于等于0",
			}, fmt.Errorf("参数错误")
		}
	}
	parameter := &credits.OperationCreditParameter{
		No:        ocp.No,
		Uid:       ocp.Uid,
		Points:    uint64(ocp.Points),
		Desc:      ocp.Desc,
		Operation: c.transforOperationAction(ocp.Action),
		Ref:       ocp.Ref,
		RefId:     ocp.RefId,
	}
	service := credits.NewCreditService()
	rlt := service.OperCredit(parameter)
	errDesc := ""
	if rlt.Error != nil {
		errDesc = rlt.Error.Error()
	}
	return &Result_{
		No:              rlt.No,
		RemainingPoints: rlt.RemainingPoints,
		State:           c.transforOperationState(rlt.State),
		Err:             errDesc,
	}, rlt.Error
}

func (c *CreditServiceProxy) GetCredit(uid int64) (r int64, err error) {
	if uid <= 0 {
		return 0, fmt.Errorf("参数错误")
	}
	service := credits.NewCreditService()
	credits := service.GetCredit(uid)
	return credits, nil
}

type CreditServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCreditServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CreditServiceClient {
	return &CreditServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCreditServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CreditServiceClient {
	return &CreditServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Ocp
func (p *CreditServiceClient) Do(ocp *OperationCreditParameter) (r *Result_, err error) {
	if err = p.sendDo(ocp); err != nil {
		return
	}
	return p.recvDo()
}

func (p *CreditServiceClient) sendDo(ocp *OperationCreditParameter) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Do", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DoArgs{
		Ocp: ocp,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CreditServiceClient) recvDo() (value *Result_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Do failed: out of sequence response")
		return
	}
	result := DoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Uid
func (p *CreditServiceClient) GetCredit(uid int64) (r int64, err error) {
	if err = p.sendGetCredit(uid); err != nil {
		return
	}
	return p.recvGetCredit()
}

func (p *CreditServiceClient) sendGetCredit(uid int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetCredit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetCreditArgs{
		Uid: uid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CreditServiceClient) recvGetCredit() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetCredit failed: out of sequence response")
		return
	}
	result := GetCreditResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type CreditServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CreditService
}

func (p *CreditServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CreditServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CreditServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCreditServiceProcessor(handler CreditService) *CreditServiceProcessor {

	self4 := &CreditServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["Do"] = &creditServiceProcessorDo{handler: handler}
	self4.processorMap["GetCredit"] = &creditServiceProcessorGetCredit{handler: handler}
	return self4
}

func (p *CreditServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type creditServiceProcessorDo struct {
	handler CreditService
}

func (p *creditServiceProcessorDo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Do", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DoResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.Do(args.Ocp); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Do: "+err2.Error())
		oprot.WriteMessageBegin("Do", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Do", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type creditServiceProcessorGetCredit struct {
	handler CreditService
}

func (p *creditServiceProcessorGetCredit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetCreditArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCredit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetCreditResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetCredit(args.Uid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCredit: "+err2.Error())
		oprot.WriteMessageBegin("GetCredit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetCredit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type DoArgs struct {
	Ocp *OperationCreditParameter `thrift:"ocp,1,required" json:"ocp"`
}

func NewDoArgs() *DoArgs {
	return &DoArgs{}
}

var DoArgs_Ocp_DEFAULT *OperationCreditParameter

func (p *DoArgs) GetOcp() *OperationCreditParameter {
	if !p.IsSetOcp() {
		return DoArgs_Ocp_DEFAULT
	}
	return p.Ocp
}
func (p *DoArgs) IsSetOcp() bool {
	return p.Ocp != nil
}

func (p *DoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Ocp = &OperationCreditParameter{}
	if err := p.Ocp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ocp, err)
	}
	return nil
}

func (p *DoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Do_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ocp", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ocp: %s", p, err)
	}
	if err := p.Ocp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Ocp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ocp: %s", p, err)
	}
	return err
}

func (p *DoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoArgs(%+v)", *p)
}

type DoResult struct {
	Success *Result_ `thrift:"success,0" json:"success"`
}

func NewDoResult() *DoResult {
	return &DoResult{}
}

var DoResult_Success_DEFAULT *Result_

func (p *DoResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return DoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Do_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoResult(%+v)", *p)
}

type GetCreditArgs struct {
	Uid int64 `thrift:"uid,1,required" json:"uid"`
}

func NewGetCreditArgs() *GetCreditArgs {
	return &GetCreditArgs{}
}

func (p *GetCreditArgs) GetUid() int64 {
	return p.Uid
}
func (p *GetCreditArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCreditArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetCreditArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCredit_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCreditArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *GetCreditArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCreditArgs(%+v)", *p)
}

type GetCreditResult struct {
	Success *int64 `thrift:"success,0" json:"success"`
}

func NewGetCreditResult() *GetCreditResult {
	return &GetCreditResult{}
}

var GetCreditResult_Success_DEFAULT int64

func (p *GetCreditResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return GetCreditResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *GetCreditResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCreditResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCreditResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetCreditResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCredit_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCreditResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetCreditResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCreditResult(%+v)", *p)
}
