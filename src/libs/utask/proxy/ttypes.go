// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"

	"github.com/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TASK_GROUP_TYPE int64

const (
	TASK_GROUP_TYPE_LIST TASK_GROUP_TYPE = 1
	TASK_GROUP_TYPE_WEB  TASK_GROUP_TYPE = 2
)

func (p TASK_GROUP_TYPE) String() string {
	switch p {
	case TASK_GROUP_TYPE_LIST:
		return "TASK_GROUP_TYPE_LIST"
	case TASK_GROUP_TYPE_WEB:
		return "TASK_GROUP_TYPE_WEB"
	}
	return "<UNSET>"
}

func TASK_GROUP_TYPEFromString(s string) (TASK_GROUP_TYPE, error) {
	switch s {
	case "TASK_GROUP_TYPE_LIST":
		return TASK_GROUP_TYPE_LIST, nil
	case "TASK_GROUP_TYPE_WEB":
		return TASK_GROUP_TYPE_WEB, nil
	}
	return TASK_GROUP_TYPE(0), fmt.Errorf("not a valid TASK_GROUP_TYPE string")
}

func TASK_GROUP_TYPEPtr(v TASK_GROUP_TYPE) *TASK_GROUP_TYPE { return &v }

type TASK_TYPE int64

const (
	TASK_TYPE_ONCE      TASK_TYPE = 1
	TASK_TYPE_DUPLICATE TASK_TYPE = 2
)

func (p TASK_TYPE) String() string {
	switch p {
	case TASK_TYPE_ONCE:
		return "TASK_TYPE_ONCE"
	case TASK_TYPE_DUPLICATE:
		return "TASK_TYPE_DUPLICATE"
	}
	return "<UNSET>"
}

func TASK_TYPEFromString(s string) (TASK_TYPE, error) {
	switch s {
	case "TASK_TYPE_ONCE":
		return TASK_TYPE_ONCE, nil
	case "TASK_TYPE_DUPLICATE":
		return TASK_TYPE_DUPLICATE, nil
	}
	return TASK_TYPE(0), fmt.Errorf("not a valid TASK_TYPE string")
}

func TASK_TYPEPtr(v TASK_TYPE) *TASK_TYPE { return &v }

type TASK_PERIOD_TYPE int64

const (
	TASK_PERIOD_TYPE_NULL TASK_PERIOD_TYPE = 1
	TASK_PERIOD_TYPE_DAY  TASK_PERIOD_TYPE = 2
)

func (p TASK_PERIOD_TYPE) String() string {
	switch p {
	case TASK_PERIOD_TYPE_NULL:
		return "TASK_PERIOD_TYPE_NULL"
	case TASK_PERIOD_TYPE_DAY:
		return "TASK_PERIOD_TYPE_DAY"
	}
	return "<UNSET>"
}

func TASK_PERIOD_TYPEFromString(s string) (TASK_PERIOD_TYPE, error) {
	switch s {
	case "TASK_PERIOD_TYPE_NULL":
		return TASK_PERIOD_TYPE_NULL, nil
	case "TASK_PERIOD_TYPE_DAY":
		return TASK_PERIOD_TYPE_DAY, nil
	}
	return TASK_PERIOD_TYPE(0), fmt.Errorf("not a valid TASK_PERIOD_TYPE string")
}

func TASK_PERIOD_TYPEPtr(v TASK_PERIOD_TYPE) *TASK_PERIOD_TYPE { return &v }

type TASK_REWARD_TYPE int64

const (
	TASK_REWARD_TYPE_CREDIT TASK_REWARD_TYPE = 1
)

func (p TASK_REWARD_TYPE) String() string {
	switch p {
	case TASK_REWARD_TYPE_CREDIT:
		return "TASK_REWARD_TYPE_CREDIT"
	}
	return "<UNSET>"
}

func TASK_REWARD_TYPEFromString(s string) (TASK_REWARD_TYPE, error) {
	switch s {
	case "TASK_REWARD_TYPE_CREDIT":
		return TASK_REWARD_TYPE_CREDIT, nil
	}
	return TASK_REWARD_TYPE(0), fmt.Errorf("not a valid TASK_REWARD_TYPE string")
}

func TASK_REWARD_TYPEPtr(v TASK_REWARD_TYPE) *TASK_REWARD_TYPE { return &v }

type MISSION_STATUS int64

const (
	MISSION_STATUS_FAILURE MISSION_STATUS = 0
	MISSION_STATUS_UNDONE  MISSION_STATUS = 1
	MISSION_STATUS_DONE    MISSION_STATUS = 2
)

func (p MISSION_STATUS) String() string {
	switch p {
	case MISSION_STATUS_FAILURE:
		return "MISSION_STATUS_FAILURE"
	case MISSION_STATUS_UNDONE:
		return "MISSION_STATUS_UNDONE"
	case MISSION_STATUS_DONE:
		return "MISSION_STATUS_DONE"
	}
	return "<UNSET>"
}

func MISSION_STATUSFromString(s string) (MISSION_STATUS, error) {
	switch s {
	case "MISSION_STATUS_FAILURE":
		return MISSION_STATUS_FAILURE, nil
	case "MISSION_STATUS_UNDONE":
		return MISSION_STATUS_UNDONE, nil
	case "MISSION_STATUS_DONE":
		return MISSION_STATUS_DONE, nil
	}
	return MISSION_STATUS(0), fmt.Errorf("not a valid MISSION_STATUS string")
}

func MISSION_STATUSPtr(v MISSION_STATUS) *MISSION_STATUS { return &v }

type TaskGroup struct {
	GroupId      int64           `thrift:"GroupId,1" json:"GroupId"`
	GroupType    TASK_GROUP_TYPE `thrift:"GroupType,2" json:"GroupType"`
	TaskType     TASK_TYPE       `thrift:"TaskType,3" json:"TaskType"`
	Name         string          `thrift:"Name,4" json:"Name"`
	Description  string          `thrift:"Description,5" json:"Description"`
	Icon         int64           `thrift:"Icon,6" json:"Icon"`
	BgImg        int64           `thrift:"BgImg,7" json:"BgImg"`
	Tasks        int32           `thrift:"Tasks,8" json:"Tasks"`
	Enabled      bool            `thrift:"Enabled,9" json:"Enabled"`
	StartTime    int64           `thrift:"StartTime,10" json:"StartTime"`
	EndTime      int64           `thrift:"EndTime,11" json:"EndTime"`
	DisplayOrder int32           `thrift:"DisplayOrder,12" json:"DisplayOrder"`
	Ex1          string          `thrift:"Ex1,13" json:"Ex1"`
	Ex2          string          `thrift:"Ex2,14" json:"Ex2"`
	Ex3          string          `thrift:"Ex3,15" json:"Ex3"`
	Ex4          string          `thrift:"Ex4,16" json:"Ex4"`
	Ex5          string          `thrift:"Ex5,17" json:"Ex5"`
}

func NewTaskGroup() *TaskGroup {
	return &TaskGroup{}
}

func (p *TaskGroup) GetGroupId() int64 {
	return p.GroupId
}

func (p *TaskGroup) GetGroupType() TASK_GROUP_TYPE {
	return p.GroupType
}

func (p *TaskGroup) GetTaskType() TASK_TYPE {
	return p.TaskType
}

func (p *TaskGroup) GetName() string {
	return p.Name
}

func (p *TaskGroup) GetDescription() string {
	return p.Description
}

func (p *TaskGroup) GetIcon() int64 {
	return p.Icon
}

func (p *TaskGroup) GetBgImg() int64 {
	return p.BgImg
}

func (p *TaskGroup) GetTasks() int32 {
	return p.Tasks
}

func (p *TaskGroup) GetEnabled() bool {
	return p.Enabled
}

func (p *TaskGroup) GetStartTime() int64 {
	return p.StartTime
}

func (p *TaskGroup) GetEndTime() int64 {
	return p.EndTime
}

func (p *TaskGroup) GetDisplayOrder() int32 {
	return p.DisplayOrder
}

func (p *TaskGroup) GetEx1() string {
	return p.Ex1
}

func (p *TaskGroup) GetEx2() string {
	return p.Ex2
}

func (p *TaskGroup) GetEx3() string {
	return p.Ex3
}

func (p *TaskGroup) GetEx4() string {
	return p.Ex4
}

func (p *TaskGroup) GetEx5() string {
	return p.Ex5
}
func (p *TaskGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TaskGroup) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *TaskGroup) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := TASK_GROUP_TYPE(v)
		p.GroupType = temp
	}
	return nil
}

func (p *TaskGroup) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := TASK_TYPE(v)
		p.TaskType = temp
	}
	return nil
}

func (p *TaskGroup) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TaskGroup) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TaskGroup) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Icon = v
	}
	return nil
}

func (p *TaskGroup) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.BgImg = v
	}
	return nil
}

func (p *TaskGroup) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Tasks = v
	}
	return nil
}

func (p *TaskGroup) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *TaskGroup) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TaskGroup) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *TaskGroup) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.DisplayOrder = v
	}
	return nil
}

func (p *TaskGroup) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Ex1 = v
	}
	return nil
}

func (p *TaskGroup) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.Ex2 = v
	}
	return nil
}

func (p *TaskGroup) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.Ex3 = v
	}
	return nil
}

func (p *TaskGroup) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.Ex4 = v
	}
	return nil
}

func (p *TaskGroup) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.Ex5 = v
	}
	return nil
}

func (p *TaskGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TaskGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GroupId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:GroupId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.GroupId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:GroupId: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GroupType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:GroupType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GroupType)); err != nil {
		return fmt.Errorf("%T.GroupType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:GroupType: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:TaskType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return fmt.Errorf("%T.TaskType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:TaskType: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.Name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Name: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:Description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.Description (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:Description: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Icon", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Icon: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Icon)); err != nil {
		return fmt.Errorf("%T.Icon (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Icon: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BgImg", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:BgImg: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BgImg)); err != nil {
		return fmt.Errorf("%T.BgImg (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:BgImg: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Tasks", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:Tasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Tasks)); err != nil {
		return fmt.Errorf("%T.Tasks (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:Tasks: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.BOOL, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:Enabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return fmt.Errorf("%T.Enabled (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:Enabled: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StartTime", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:StartTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return fmt.Errorf("%T.StartTime (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:StartTime: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EndTime", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:EndTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return fmt.Errorf("%T.EndTime (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:EndTime: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DisplayOrder", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:DisplayOrder: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DisplayOrder)); err != nil {
		return fmt.Errorf("%T.DisplayOrder (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:DisplayOrder: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex1", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:Ex1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex1)); err != nil {
		return fmt.Errorf("%T.Ex1 (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:Ex1: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex2", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:Ex2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex2)); err != nil {
		return fmt.Errorf("%T.Ex2 (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:Ex2: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex3", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:Ex3: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex3)); err != nil {
		return fmt.Errorf("%T.Ex3 (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:Ex3: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex4", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:Ex4: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex4)); err != nil {
		return fmt.Errorf("%T.Ex4 (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:Ex4: %s", p, err)
	}
	return err
}

func (p *TaskGroup) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex5", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:Ex5: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex5)); err != nil {
		return fmt.Errorf("%T.Ex5 (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:Ex5: %s", p, err)
	}
	return err
}

func (p *TaskGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskGroup(%+v)", *p)
}

type Task struct {
	TaskId        int64            `thrift:"TaskId,1" json:"TaskId"`
	TaskType      TASK_TYPE        `thrift:"TaskType,2" json:"TaskType"`
	GroupId       int64            `thrift:"GroupId,3" json:"GroupId"`
	Name          string           `thrift:"Name,4" json:"Name"`
	Description   string           `thrift:"Description,5" json:"Description"`
	Icon          int64            `thrift:"Icon,6" json:"Icon"`
	TaskLimits    int32            `thrift:"TaskLimits,7" json:"TaskLimits"`
	ApplyPerm     string           `thrift:"ApplyPerm,8" json:"ApplyPerm"`
	EventName     string           `thrift:"EventName,9" json:"EventName"`
	StartTime     int64            `thrift:"StartTime,10" json:"StartTime"`
	EndTime       int64            `thrift:"EndTime,11" json:"EndTime"`
	ResetTime     int32            `thrift:"ResetTime,12" json:"ResetTime"`
	Period        int32            `thrift:"Period,13" json:"Period"`
	PeriodType    TASK_PERIOD_TYPE `thrift:"PeriodType,14" json:"PeriodType"`
	Reward        TASK_REWARD_TYPE `thrift:"Reward,15" json:"Reward"`
	Prize         int64            `thrift:"Prize,16" json:"Prize"`
	Applicants    int64            `thrift:"Applicants,17" json:"Applicants"`
	Achievers     int32            `thrift:"Achievers,18" json:"Achievers"`
	Version       string           `thrift:"Version,19" json:"Version"`
	DisplayOrder  int32            `thrift:"DisplayOrder,20" json:"DisplayOrder"`
	ResetVar      int32            `thrift:"ResetVar,21" json:"ResetVar"`
	LastResetTime int64            `thrift:"LastResetTime,22" json:"LastResetTime"`
	Ex1           string           `thrift:"Ex1,23" json:"Ex1"`
	Ex2           string           `thrift:"Ex2,24" json:"Ex2"`
	Ex3           string           `thrift:"Ex3,25" json:"Ex3"`
	Ex4           string           `thrift:"Ex4,26" json:"Ex4"`
	Ex5           string           `thrift:"Ex5,27" json:"Ex5"`
}

func NewTask() *Task {
	return &Task{}
}

func (p *Task) GetTaskId() int64 {
	return p.TaskId
}

func (p *Task) GetTaskType() TASK_TYPE {
	return p.TaskType
}

func (p *Task) GetGroupId() int64 {
	return p.GroupId
}

func (p *Task) GetName() string {
	return p.Name
}

func (p *Task) GetDescription() string {
	return p.Description
}

func (p *Task) GetIcon() int64 {
	return p.Icon
}

func (p *Task) GetTaskLimits() int32 {
	return p.TaskLimits
}

func (p *Task) GetApplyPerm() string {
	return p.ApplyPerm
}

func (p *Task) GetEventName() string {
	return p.EventName
}

func (p *Task) GetStartTime() int64 {
	return p.StartTime
}

func (p *Task) GetEndTime() int64 {
	return p.EndTime
}

func (p *Task) GetResetTime() int32 {
	return p.ResetTime
}

func (p *Task) GetPeriod() int32 {
	return p.Period
}

func (p *Task) GetPeriodType() TASK_PERIOD_TYPE {
	return p.PeriodType
}

func (p *Task) GetReward() TASK_REWARD_TYPE {
	return p.Reward
}

func (p *Task) GetPrize() int64 {
	return p.Prize
}

func (p *Task) GetApplicants() int64 {
	return p.Applicants
}

func (p *Task) GetAchievers() int32 {
	return p.Achievers
}

func (p *Task) GetVersion() string {
	return p.Version
}

func (p *Task) GetDisplayOrder() int32 {
	return p.DisplayOrder
}

func (p *Task) GetResetVar() int32 {
	return p.ResetVar
}

func (p *Task) GetLastResetTime() int64 {
	return p.LastResetTime
}

func (p *Task) GetEx1() string {
	return p.Ex1
}

func (p *Task) GetEx2() string {
	return p.Ex2
}

func (p *Task) GetEx3() string {
	return p.Ex3
}

func (p *Task) GetEx4() string {
	return p.Ex4
}

func (p *Task) GetEx5() string {
	return p.Ex5
}
func (p *Task) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.ReadField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Task) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *Task) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := TASK_TYPE(v)
		p.TaskType = temp
	}
	return nil
}

func (p *Task) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *Task) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Task) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Task) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Icon = v
	}
	return nil
}

func (p *Task) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TaskLimits = v
	}
	return nil
}

func (p *Task) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ApplyPerm = v
	}
	return nil
}

func (p *Task) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EventName = v
	}
	return nil
}

func (p *Task) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *Task) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *Task) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.ResetTime = v
	}
	return nil
}

func (p *Task) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.Period = v
	}
	return nil
}

func (p *Task) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		temp := TASK_PERIOD_TYPE(v)
		p.PeriodType = temp
	}
	return nil
}

func (p *Task) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		temp := TASK_REWARD_TYPE(v)
		p.Reward = temp
	}
	return nil
}

func (p *Task) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 16: %s", err)
	} else {
		p.Prize = v
	}
	return nil
}

func (p *Task) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 17: %s", err)
	} else {
		p.Applicants = v
	}
	return nil
}

func (p *Task) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 18: %s", err)
	} else {
		p.Achievers = v
	}
	return nil
}

func (p *Task) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 19: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Task) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 20: %s", err)
	} else {
		p.DisplayOrder = v
	}
	return nil
}

func (p *Task) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s", err)
	} else {
		p.ResetVar = v
	}
	return nil
}

func (p *Task) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 22: %s", err)
	} else {
		p.LastResetTime = v
	}
	return nil
}

func (p *Task) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s", err)
	} else {
		p.Ex1 = v
	}
	return nil
}

func (p *Task) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s", err)
	} else {
		p.Ex2 = v
	}
	return nil
}

func (p *Task) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 25: %s", err)
	} else {
		p.Ex3 = v
	}
	return nil
}

func (p *Task) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 26: %s", err)
	} else {
		p.Ex4 = v
	}
	return nil
}

func (p *Task) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 27: %s", err)
	} else {
		p.Ex5 = v
	}
	return nil
}

func (p *Task) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Task"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:TaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TaskId)); err != nil {
		return fmt.Errorf("%T.TaskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:TaskId: %s", p, err)
	}
	return err
}

func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:TaskType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return fmt.Errorf("%T.TaskType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:TaskType: %s", p, err)
	}
	return err
}

func (p *Task) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GroupId", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:GroupId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.GroupId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:GroupId: %s", p, err)
	}
	return err
}

func (p *Task) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.Name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Name: %s", p, err)
	}
	return err
}

func (p *Task) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:Description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.Description (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:Description: %s", p, err)
	}
	return err
}

func (p *Task) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Icon", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Icon: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Icon)); err != nil {
		return fmt.Errorf("%T.Icon (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Icon: %s", p, err)
	}
	return err
}

func (p *Task) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskLimits", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:TaskLimits: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskLimits)); err != nil {
		return fmt.Errorf("%T.TaskLimits (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:TaskLimits: %s", p, err)
	}
	return err
}

func (p *Task) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ApplyPerm", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:ApplyPerm: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ApplyPerm)); err != nil {
		return fmt.Errorf("%T.ApplyPerm (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:ApplyPerm: %s", p, err)
	}
	return err
}

func (p *Task) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EventName", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:EventName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.EventName)); err != nil {
		return fmt.Errorf("%T.EventName (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:EventName: %s", p, err)
	}
	return err
}

func (p *Task) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StartTime", thrift.I64, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:StartTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return fmt.Errorf("%T.StartTime (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:StartTime: %s", p, err)
	}
	return err
}

func (p *Task) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EndTime", thrift.I64, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:EndTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return fmt.Errorf("%T.EndTime (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:EndTime: %s", p, err)
	}
	return err
}

func (p *Task) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ResetTime", thrift.I32, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:ResetTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResetTime)); err != nil {
		return fmt.Errorf("%T.ResetTime (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:ResetTime: %s", p, err)
	}
	return err
}

func (p *Task) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Period", thrift.I32, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:Period: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Period)); err != nil {
		return fmt.Errorf("%T.Period (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:Period: %s", p, err)
	}
	return err
}

func (p *Task) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PeriodType", thrift.I32, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:PeriodType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PeriodType)); err != nil {
		return fmt.Errorf("%T.PeriodType (14) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:PeriodType: %s", p, err)
	}
	return err
}

func (p *Task) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Reward", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:Reward: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Reward)); err != nil {
		return fmt.Errorf("%T.Reward (15) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:Reward: %s", p, err)
	}
	return err
}

func (p *Task) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Prize", thrift.I64, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:Prize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Prize)); err != nil {
		return fmt.Errorf("%T.Prize (16) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:Prize: %s", p, err)
	}
	return err
}

func (p *Task) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Applicants", thrift.I64, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:Applicants: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Applicants)); err != nil {
		return fmt.Errorf("%T.Applicants (17) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:Applicants: %s", p, err)
	}
	return err
}

func (p *Task) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Achievers", thrift.I32, 18); err != nil {
		return fmt.Errorf("%T write field begin error 18:Achievers: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Achievers)); err != nil {
		return fmt.Errorf("%T.Achievers (18) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 18:Achievers: %s", p, err)
	}
	return err
}

func (p *Task) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Version", thrift.STRING, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:Version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.Version (19) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:Version: %s", p, err)
	}
	return err
}

func (p *Task) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DisplayOrder", thrift.I32, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:DisplayOrder: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DisplayOrder)); err != nil {
		return fmt.Errorf("%T.DisplayOrder (20) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:DisplayOrder: %s", p, err)
	}
	return err
}

func (p *Task) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ResetVar", thrift.I32, 21); err != nil {
		return fmt.Errorf("%T write field begin error 21:ResetVar: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResetVar)); err != nil {
		return fmt.Errorf("%T.ResetVar (21) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 21:ResetVar: %s", p, err)
	}
	return err
}

func (p *Task) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LastResetTime", thrift.I64, 22); err != nil {
		return fmt.Errorf("%T write field begin error 22:LastResetTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastResetTime)); err != nil {
		return fmt.Errorf("%T.LastResetTime (22) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 22:LastResetTime: %s", p, err)
	}
	return err
}

func (p *Task) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex1", thrift.STRING, 23); err != nil {
		return fmt.Errorf("%T write field begin error 23:Ex1: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex1)); err != nil {
		return fmt.Errorf("%T.Ex1 (23) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 23:Ex1: %s", p, err)
	}
	return err
}

func (p *Task) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex2", thrift.STRING, 24); err != nil {
		return fmt.Errorf("%T write field begin error 24:Ex2: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex2)); err != nil {
		return fmt.Errorf("%T.Ex2 (24) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 24:Ex2: %s", p, err)
	}
	return err
}

func (p *Task) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex3", thrift.STRING, 25); err != nil {
		return fmt.Errorf("%T write field begin error 25:Ex3: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex3)); err != nil {
		return fmt.Errorf("%T.Ex3 (25) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 25:Ex3: %s", p, err)
	}
	return err
}

func (p *Task) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex4", thrift.STRING, 26); err != nil {
		return fmt.Errorf("%T write field begin error 26:Ex4: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex4)); err != nil {
		return fmt.Errorf("%T.Ex4 (26) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 26:Ex4: %s", p, err)
	}
	return err
}

func (p *Task) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Ex5", thrift.STRING, 27); err != nil {
		return fmt.Errorf("%T write field begin error 27:Ex5: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ex5)); err != nil {
		return fmt.Errorf("%T.Ex5 (27) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 27:Ex5: %s", p, err)
	}
	return err
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}

type TaskEventName struct {
	Id          int64  `thrift:"Id,1" json:"Id"`
	Name        string `thrift:"Name,2" json:"Name"`
	Description string `thrift:"Description,3" json:"Description"`
	Enabled     bool   `thrift:"Enabled,4" json:"Enabled"`
}

func NewTaskEventName() *TaskEventName {
	return &TaskEventName{}
}

func (p *TaskEventName) GetId() int64 {
	return p.Id
}

func (p *TaskEventName) GetName() string {
	return p.Name
}

func (p *TaskEventName) GetDescription() string {
	return p.Description
}

func (p *TaskEventName) GetEnabled() bool {
	return p.Enabled
}
func (p *TaskEventName) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TaskEventName) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *TaskEventName) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TaskEventName) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *TaskEventName) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Enabled = v
	}
	return nil
}

func (p *TaskEventName) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskEventName"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TaskEventName) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.Id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Id: %s", p, err)
	}
	return err
}

func (p *TaskEventName) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.Name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Name: %s", p, err)
	}
	return err
}

func (p *TaskEventName) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Description", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.Description (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Description: %s", p, err)
	}
	return err
}

func (p *TaskEventName) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Enabled", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Enabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
		return fmt.Errorf("%T.Enabled (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Enabled: %s", p, err)
	}
	return err
}

func (p *TaskEventName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskEventName(%+v)", *p)
}

type Mission struct {
	Task   *Task          `thrift:"Task,1" json:"Task"`
	Limit  int32          `thrift:"Limit,2" json:"Limit"`
	Count  int32          `thrift:"Count,3" json:"Count"`
	Status MISSION_STATUS `thrift:"Status,4" json:"Status"`
}

func NewMission() *Mission {
	return &Mission{}
}

var Mission_Task_DEFAULT *Task

func (p *Mission) GetTask() *Task {
	if !p.IsSetTask() {
		return Mission_Task_DEFAULT
	}
	return p.Task
}

func (p *Mission) GetLimit() int32 {
	return p.Limit
}

func (p *Mission) GetCount() int32 {
	return p.Count
}

func (p *Mission) GetStatus() MISSION_STATUS {
	return p.Status
}
func (p *Mission) IsSetTask() bool {
	return p.Task != nil
}

func (p *Mission) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Mission) ReadField1(iprot thrift.TProtocol) error {
	p.Task = &Task{}
	if err := p.Task.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Task, err)
	}
	return nil
}

func (p *Mission) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *Mission) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *Mission) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := MISSION_STATUS(v)
		p.Status = temp
	}
	return nil
}

func (p *Mission) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Mission"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Mission) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Task", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Task: %s", p, err)
	}
	if err := p.Task.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Task, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Task: %s", p, err)
	}
	return err
}

func (p *Mission) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Limit", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Limit: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return fmt.Errorf("%T.Limit (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Limit: %s", p, err)
	}
	return err
}

func (p *Mission) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.Count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Count: %s", p, err)
	}
	return err
}

func (p *Mission) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.Status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Status: %s", p, err)
	}
	return err
}

func (p *Mission) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Mission(%+v)", *p)
}

type MissionGroup struct {
	Group *TaskGroup `thrift:"Group,1" json:"Group"`
	Tasks []*Mission `thrift:"Tasks,2" json:"Tasks"`
	Dones int32      `thrift:"Dones,3" json:"Dones"`
}

func NewMissionGroup() *MissionGroup {
	return &MissionGroup{}
}

var MissionGroup_Group_DEFAULT *TaskGroup

func (p *MissionGroup) GetGroup() *TaskGroup {
	if !p.IsSetGroup() {
		return MissionGroup_Group_DEFAULT
	}
	return p.Group
}

func (p *MissionGroup) GetTasks() []*Mission {
	return p.Tasks
}

func (p *MissionGroup) GetDones() int32 {
	return p.Dones
}
func (p *MissionGroup) IsSetGroup() bool {
	return p.Group != nil
}

func (p *MissionGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MissionGroup) ReadField1(iprot thrift.TProtocol) error {
	p.Group = &TaskGroup{}
	if err := p.Group.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Group, err)
	}
	return nil
}

func (p *MissionGroup) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Mission, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Mission{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Tasks = append(p.Tasks, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MissionGroup) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Dones = v
	}
	return nil
}

func (p *MissionGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MissionGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MissionGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Group", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Group: %s", p, err)
	}
	if err := p.Group.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Group, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Group: %s", p, err)
	}
	return err
}

func (p *MissionGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Tasks", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Tasks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Tasks: %s", p, err)
	}
	return err
}

func (p *MissionGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Dones", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Dones: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Dones)); err != nil {
		return fmt.Errorf("%T.Dones (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Dones: %s", p, err)
	}
	return err
}

func (p *MissionGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MissionGroup(%+v)", *p)
}

type MissionReward struct {
	RewardType TASK_REWARD_TYPE `thrift:"RewardType,1" json:"RewardType"`
	Prize      int64            `thrift:"Prize,2" json:"Prize"`
}

func NewMissionReward() *MissionReward {
	return &MissionReward{}
}

func (p *MissionReward) GetRewardType() TASK_REWARD_TYPE {
	return p.RewardType
}

func (p *MissionReward) GetPrize() int64 {
	return p.Prize
}
func (p *MissionReward) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MissionReward) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := TASK_REWARD_TYPE(v)
		p.RewardType = temp
	}
	return nil
}

func (p *MissionReward) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Prize = v
	}
	return nil
}

func (p *MissionReward) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MissionReward"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MissionReward) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RewardType", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:RewardType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RewardType)); err != nil {
		return fmt.Errorf("%T.RewardType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:RewardType: %s", p, err)
	}
	return err
}

func (p *MissionReward) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Prize", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Prize: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Prize)); err != nil {
		return fmt.Errorf("%T.Prize (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Prize: %s", p, err)
	}
	return err
}

func (p *MissionReward) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MissionReward(%+v)", *p)
}

type EventResult_ struct {
	DoneTasks      []*Task          `thrift:"DoneTasks,1" json:"DoneTasks"`
	RelevanceTasks []*Task          `thrift:"RelevanceTasks,2" json:"RelevanceTasks"`
	Rewards        []*MissionReward `thrift:"Rewards,3" json:"Rewards"`
	Exception      string           `thrift:"Exception,4" json:"Exception"`
}

func NewEventResult_() *EventResult_ {
	return &EventResult_{}
}

func (p *EventResult_) GetDoneTasks() []*Task {
	return p.DoneTasks
}

func (p *EventResult_) GetRelevanceTasks() []*Task {
	return p.RelevanceTasks
}

func (p *EventResult_) GetRewards() []*MissionReward {
	return p.Rewards
}

func (p *EventResult_) GetException() string {
	return p.Exception
}
func (p *EventResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EventResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Task, 0, size)
	p.DoneTasks = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Task{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.DoneTasks = append(p.DoneTasks, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *EventResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Task, 0, size)
	p.RelevanceTasks = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Task{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.RelevanceTasks = append(p.RelevanceTasks, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *EventResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MissionReward, 0, size)
	p.Rewards = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &MissionReward{}
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3, err)
		}
		p.Rewards = append(p.Rewards, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *EventResult_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Exception = v
	}
	return nil
}

func (p *EventResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EventResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *EventResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DoneTasks", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:DoneTasks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DoneTasks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DoneTasks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:DoneTasks: %s", p, err)
	}
	return err
}

func (p *EventResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RelevanceTasks", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:RelevanceTasks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelevanceTasks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.RelevanceTasks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:RelevanceTasks: %s", p, err)
	}
	return err
}

func (p *EventResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Rewards", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Rewards: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rewards)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Rewards {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Rewards: %s", p, err)
	}
	return err
}

func (p *EventResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exception", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Exception: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Exception)); err != nil {
		return fmt.Errorf("%T.Exception (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Exception: %s", p, err)
	}
	return err
}

func (p *EventResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EventResult_(%+v)", *p)
}

type ActionResult_ struct {
	Id        int64  `thrift:"Id,1" json:"Id"`
	Success   bool   `thrift:"Success,2" json:"Success"`
	Exception string `thrift:"Exception,3" json:"Exception"`
}

func NewActionResult_() *ActionResult_ {
	return &ActionResult_{}
}

func (p *ActionResult_) GetId() int64 {
	return p.Id
}

func (p *ActionResult_) GetSuccess() bool {
	return p.Success
}

func (p *ActionResult_) GetException() string {
	return p.Exception
}
func (p *ActionResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ActionResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *ActionResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ActionResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Exception = v
	}
	return nil
}

func (p *ActionResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ActionResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ActionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.Id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Id: %s", p, err)
	}
	return err
}

func (p *ActionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Success", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.Success (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Success: %s", p, err)
	}
	return err
}

func (p *ActionResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exception", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Exception: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Exception)); err != nil {
		return fmt.Errorf("%T.Exception (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Exception: %s", p, err)
	}
	return err
}

func (p *ActionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActionResult_(%+v)", *p)
}

type TaskTimer struct {
	TaskId       int64 `thrift:"TaskId,1" json:"TaskId"`
	RunTime      int64 `thrift:"RunTime,2" json:"RunTime"`
	PreResetTime int64 `thrift:"PreResetTime,3" json:"PreResetTime"`
}

func NewTaskTimer() *TaskTimer {
	return &TaskTimer{}
}

func (p *TaskTimer) GetTaskId() int64 {
	return p.TaskId
}

func (p *TaskTimer) GetRunTime() int64 {
	return p.RunTime
}

func (p *TaskTimer) GetPreResetTime() int64 {
	return p.PreResetTime
}
func (p *TaskTimer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TaskTimer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *TaskTimer) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RunTime = v
	}
	return nil
}

func (p *TaskTimer) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PreResetTime = v
	}
	return nil
}

func (p *TaskTimer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskTimer"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TaskTimer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TaskId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:TaskId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TaskId)); err != nil {
		return fmt.Errorf("%T.TaskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:TaskId: %s", p, err)
	}
	return err
}

func (p *TaskTimer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RunTime", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:RunTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RunTime)); err != nil {
		return fmt.Errorf("%T.RunTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:RunTime: %s", p, err)
	}
	return err
}

func (p *TaskTimer) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PreResetTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:PreResetTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PreResetTime)); err != nil {
		return fmt.Errorf("%T.PreResetTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:PreResetTime: %s", p, err)
	}
	return err
}

func (p *TaskTimer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskTimer(%+v)", *p)
}
