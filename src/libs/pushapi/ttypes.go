// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package pushapi

import (
	"bytes"
	"fmt"

	"github.com/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PUSH_TYPE int64

const (
	PUSH_TYPE_SINGLE PUSH_TYPE = 1
	PUSH_TYPE_GROUP  PUSH_TYPE = 2
	PUSH_TYPE_ALL    PUSH_TYPE = 3
)

func (p PUSH_TYPE) String() string {
	switch p {
	case PUSH_TYPE_SINGLE:
		return "PUSH_TYPE_SINGLE"
	case PUSH_TYPE_GROUP:
		return "PUSH_TYPE_GROUP"
	case PUSH_TYPE_ALL:
		return "PUSH_TYPE_ALL"
	}
	return "<UNSET>"
}

func PUSH_TYPEFromString(s string) (PUSH_TYPE, error) {
	switch s {
	case "PUSH_TYPE_SINGLE":
		return PUSH_TYPE_SINGLE, nil
	case "PUSH_TYPE_GROUP":
		return PUSH_TYPE_GROUP, nil
	case "PUSH_TYPE_ALL":
		return PUSH_TYPE_ALL, nil
	}
	return PUSH_TYPE(0), fmt.Errorf("not a valid PUSH_TYPE string")
}

func PUSH_TYPEPtr(v PUSH_TYPE) *PUSH_TYPE { return &v }

type DEVICE_TYPE int64

const (
	DEVICE_TYPE_BROWER  DEVICE_TYPE = 1
	DEVICE_TYPE_PC      DEVICE_TYPE = 2
	DEVICE_TYPE_ANDROID DEVICE_TYPE = 3
	DEVICE_TYPE_IOS     DEVICE_TYPE = 4
	DEVICE_TYPE_WP      DEVICE_TYPE = 5
)

func (p DEVICE_TYPE) String() string {
	switch p {
	case DEVICE_TYPE_BROWER:
		return "DEVICE_TYPE_BROWER"
	case DEVICE_TYPE_PC:
		return "DEVICE_TYPE_PC"
	case DEVICE_TYPE_ANDROID:
		return "DEVICE_TYPE_ANDROID"
	case DEVICE_TYPE_IOS:
		return "DEVICE_TYPE_IOS"
	case DEVICE_TYPE_WP:
		return "DEVICE_TYPE_WP"
	}
	return "<UNSET>"
}

func DEVICE_TYPEFromString(s string) (DEVICE_TYPE, error) {
	switch s {
	case "DEVICE_TYPE_BROWER":
		return DEVICE_TYPE_BROWER, nil
	case "DEVICE_TYPE_PC":
		return DEVICE_TYPE_PC, nil
	case "DEVICE_TYPE_ANDROID":
		return DEVICE_TYPE_ANDROID, nil
	case "DEVICE_TYPE_IOS":
		return DEVICE_TYPE_IOS, nil
	case "DEVICE_TYPE_WP":
		return DEVICE_TYPE_WP, nil
	}
	return DEVICE_TYPE(0), fmt.Errorf("not a valid DEVICE_TYPE string")
}

func DEVICE_TYPEPtr(v DEVICE_TYPE) *DEVICE_TYPE { return &v }

type MSG_TYPE int64

const (
	MSG_TYPE_MSG    MSG_TYPE = 0
	MSG_TYPE_NOTICE MSG_TYPE = 1
)

func (p MSG_TYPE) String() string {
	switch p {
	case MSG_TYPE_MSG:
		return "MSG_TYPE_MSG"
	case MSG_TYPE_NOTICE:
		return "MSG_TYPE_NOTICE"
	}
	return "<UNSET>"
}

func MSG_TYPEFromString(s string) (MSG_TYPE, error) {
	switch s {
	case "MSG_TYPE_MSG":
		return MSG_TYPE_MSG, nil
	case "MSG_TYPE_NOTICE":
		return MSG_TYPE_NOTICE, nil
	}
	return MSG_TYPE(0), fmt.Errorf("not a valid MSG_TYPE string")
}

func MSG_TYPEPtr(v MSG_TYPE) *MSG_TYPE { return &v }

type DEPLOY_STATUS int64

const (
	DEPLOY_STATUS_DEV DEPLOY_STATUS = 1
	DEPLOY_STATUS_REL DEPLOY_STATUS = 2
)

func (p DEPLOY_STATUS) String() string {
	switch p {
	case DEPLOY_STATUS_DEV:
		return "DEPLOY_STATUS_DEV"
	case DEPLOY_STATUS_REL:
		return "DEPLOY_STATUS_REL"
	}
	return "<UNSET>"
}

func DEPLOY_STATUSFromString(s string) (DEPLOY_STATUS, error) {
	switch s {
	case "DEPLOY_STATUS_DEV":
		return DEPLOY_STATUS_DEV, nil
	case "DEPLOY_STATUS_REL":
		return DEPLOY_STATUS_REL, nil
	}
	return DEPLOY_STATUS(0), fmt.Errorf("not a valid DEPLOY_STATUS string")
}

func DEPLOY_STATUSPtr(v DEPLOY_STATUS) *DEPLOY_STATUS { return &v }

type PushData struct {
	Uid        string            `thrift:"Uid,1" json:"Uid"`
	PushType   PUSH_TYPE         `thrift:"pushType,2" json:"pushType"`
	ChannelId  string            `thrift:"ChannelId,3" json:"ChannelId"`
	Tag        string            `thrift:"Tag,4" json:"Tag"`
	DeviceType DEVICE_TYPE       `thrift:"DeviceType,5" json:"DeviceType"`
	MsgType    MSG_TYPE          `thrift:"MsgType,6" json:"MsgType"`
	Messages   map[string]string `thrift:"Messages,7" json:"Messages"`
	Expries    int32             `thrift:"Expries,8" json:"Expries"`
	Status     DEPLOY_STATUS     `thrift:"Status,9" json:"Status"`
	Args_      []string          `thrift:"Args,10" json:"Args"`
}

func NewPushData() *PushData {
	return &PushData{}
}

func (p *PushData) GetUid() string {
	return p.Uid
}

func (p *PushData) GetPushType() PUSH_TYPE {
	return p.PushType
}

func (p *PushData) GetChannelId() string {
	return p.ChannelId
}

func (p *PushData) GetTag() string {
	return p.Tag
}

func (p *PushData) GetDeviceType() DEVICE_TYPE {
	return p.DeviceType
}

func (p *PushData) GetMsgType() MSG_TYPE {
	return p.MsgType
}

func (p *PushData) GetMessages() map[string]string {
	return p.Messages
}

func (p *PushData) GetExpries() int32 {
	return p.Expries
}

func (p *PushData) GetStatus() DEPLOY_STATUS {
	return p.Status
}

func (p *PushData) GetArgs_() []string {
	return p.Args_
}
func (p *PushData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PushData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *PushData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PUSH_TYPE(v)
		p.PushType = temp
	}
	return nil
}

func (p *PushData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *PushData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *PushData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := DEVICE_TYPE(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *PushData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := MSG_TYPE(v)
		p.MsgType = temp
	}
	return nil
}

func (p *PushData) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Messages = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Messages[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PushData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Expries = v
	}
	return nil
}

func (p *PushData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := DEPLOY_STATUS(v)
		p.Status = temp
	}
	return nil
}

func (p *PushData) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Args_ = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.Args_ = append(p.Args_, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PushData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushData"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PushData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.Uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Uid: %s", p, err)
	}
	return err
}

func (p *PushData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pushType", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:pushType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PushType)); err != nil {
		return fmt.Errorf("%T.pushType (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:pushType: %s", p, err)
	}
	return err
}

func (p *PushData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ChannelId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ChannelId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.ChannelId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ChannelId: %s", p, err)
	}
	return err
}

func (p *PushData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Tag", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Tag: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Tag)); err != nil {
		return fmt.Errorf("%T.Tag (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Tag: %s", p, err)
	}
	return err
}

func (p *PushData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DeviceType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:DeviceType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return fmt.Errorf("%T.DeviceType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:DeviceType: %s", p, err)
	}
	return err
}

func (p *PushData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MsgType", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:MsgType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
		return fmt.Errorf("%T.MsgType (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:MsgType: %s", p, err)
	}
	return err
}

func (p *PushData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Messages", thrift.MAP, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:Messages: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Messages)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Messages {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:Messages: %s", p, err)
	}
	return err
}

func (p *PushData) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Expries", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:Expries: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Expries)); err != nil {
		return fmt.Errorf("%T.Expries (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:Expries: %s", p, err)
	}
	return err
}

func (p *PushData) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:Status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.Status (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:Status: %s", p, err)
	}
	return err
}

func (p *PushData) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Args", thrift.LIST, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:Args: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Args_)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Args_ {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:Args: %s", p, err)
	}
	return err
}

func (p *PushData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushData(%+v)", *p)
}
