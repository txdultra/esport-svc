// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"

	"github.com/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type SPH_MATCH int64

const (
	SPH_MATCH_SPH_MATCH_ALL       SPH_MATCH = 0
	SPH_MATCH_SPH_MATCH_ANY       SPH_MATCH = 1
	SPH_MATCH_SPH_MATCH_PHRASE    SPH_MATCH = 2
	SPH_MATCH_SPH_MATCH_BOOLEAN   SPH_MATCH = 3
	SPH_MATCH_SPH_MATCH_EXTENDED  SPH_MATCH = 4
	SPH_MATCH_SPH_MATCH_FULLSCAN  SPH_MATCH = 5
	SPH_MATCH_SPH_MATCH_EXTENDED2 SPH_MATCH = 6
)

func (p SPH_MATCH) String() string {
	switch p {
	case SPH_MATCH_SPH_MATCH_ALL:
		return "SPH_MATCH_SPH_MATCH_ALL"
	case SPH_MATCH_SPH_MATCH_ANY:
		return "SPH_MATCH_SPH_MATCH_ANY"
	case SPH_MATCH_SPH_MATCH_PHRASE:
		return "SPH_MATCH_SPH_MATCH_PHRASE"
	case SPH_MATCH_SPH_MATCH_BOOLEAN:
		return "SPH_MATCH_SPH_MATCH_BOOLEAN"
	case SPH_MATCH_SPH_MATCH_EXTENDED:
		return "SPH_MATCH_SPH_MATCH_EXTENDED"
	case SPH_MATCH_SPH_MATCH_FULLSCAN:
		return "SPH_MATCH_SPH_MATCH_FULLSCAN"
	case SPH_MATCH_SPH_MATCH_EXTENDED2:
		return "SPH_MATCH_SPH_MATCH_EXTENDED2"
	}
	return "<UNSET>"
}

func SPH_MATCHFromString(s string) (SPH_MATCH, error) {
	switch s {
	case "SPH_MATCH_SPH_MATCH_ALL":
		return SPH_MATCH_SPH_MATCH_ALL, nil
	case "SPH_MATCH_SPH_MATCH_ANY":
		return SPH_MATCH_SPH_MATCH_ANY, nil
	case "SPH_MATCH_SPH_MATCH_PHRASE":
		return SPH_MATCH_SPH_MATCH_PHRASE, nil
	case "SPH_MATCH_SPH_MATCH_BOOLEAN":
		return SPH_MATCH_SPH_MATCH_BOOLEAN, nil
	case "SPH_MATCH_SPH_MATCH_EXTENDED":
		return SPH_MATCH_SPH_MATCH_EXTENDED, nil
	case "SPH_MATCH_SPH_MATCH_FULLSCAN":
		return SPH_MATCH_SPH_MATCH_FULLSCAN, nil
	case "SPH_MATCH_SPH_MATCH_EXTENDED2":
		return SPH_MATCH_SPH_MATCH_EXTENDED2, nil
	}
	return SPH_MATCH(0), fmt.Errorf("not a valid SPH_MATCH string")
}

func SPH_MATCHPtr(v SPH_MATCH) *SPH_MATCH { return &v }

type SPH_RANK int64

const (
	SPH_RANK_SPH_RANK_PROXIMITY_BM25 SPH_RANK = 0
	SPH_RANK_SPH_RANK_BM25           SPH_RANK = 1
	SPH_RANK_SPH_RANK_NONE           SPH_RANK = 2
	SPH_RANK_SPH_RANK_WORDCOUNT      SPH_RANK = 3
	SPH_RANK_SPH_RANK_PROXIMITY      SPH_RANK = 4
	SPH_RANK_SPH_RANK_MATCHANY       SPH_RANK = 5
	SPH_RANK_SPH_RANK_FIELDMASK      SPH_RANK = 6
	SPH_RANK_SPH_RANK_SPH04          SPH_RANK = 7
	SPH_RANK_SPH_RANK_EXPR           SPH_RANK = 8
	SPH_RANK_SPH_RANK_TOTAL          SPH_RANK = 9
)

func (p SPH_RANK) String() string {
	switch p {
	case SPH_RANK_SPH_RANK_PROXIMITY_BM25:
		return "SPH_RANK_SPH_RANK_PROXIMITY_BM25"
	case SPH_RANK_SPH_RANK_BM25:
		return "SPH_RANK_SPH_RANK_BM25"
	case SPH_RANK_SPH_RANK_NONE:
		return "SPH_RANK_SPH_RANK_NONE"
	case SPH_RANK_SPH_RANK_WORDCOUNT:
		return "SPH_RANK_SPH_RANK_WORDCOUNT"
	case SPH_RANK_SPH_RANK_PROXIMITY:
		return "SPH_RANK_SPH_RANK_PROXIMITY"
	case SPH_RANK_SPH_RANK_MATCHANY:
		return "SPH_RANK_SPH_RANK_MATCHANY"
	case SPH_RANK_SPH_RANK_FIELDMASK:
		return "SPH_RANK_SPH_RANK_FIELDMASK"
	case SPH_RANK_SPH_RANK_SPH04:
		return "SPH_RANK_SPH_RANK_SPH04"
	case SPH_RANK_SPH_RANK_EXPR:
		return "SPH_RANK_SPH_RANK_EXPR"
	case SPH_RANK_SPH_RANK_TOTAL:
		return "SPH_RANK_SPH_RANK_TOTAL"
	}
	return "<UNSET>"
}

func SPH_RANKFromString(s string) (SPH_RANK, error) {
	switch s {
	case "SPH_RANK_SPH_RANK_PROXIMITY_BM25":
		return SPH_RANK_SPH_RANK_PROXIMITY_BM25, nil
	case "SPH_RANK_SPH_RANK_BM25":
		return SPH_RANK_SPH_RANK_BM25, nil
	case "SPH_RANK_SPH_RANK_NONE":
		return SPH_RANK_SPH_RANK_NONE, nil
	case "SPH_RANK_SPH_RANK_WORDCOUNT":
		return SPH_RANK_SPH_RANK_WORDCOUNT, nil
	case "SPH_RANK_SPH_RANK_PROXIMITY":
		return SPH_RANK_SPH_RANK_PROXIMITY, nil
	case "SPH_RANK_SPH_RANK_MATCHANY":
		return SPH_RANK_SPH_RANK_MATCHANY, nil
	case "SPH_RANK_SPH_RANK_FIELDMASK":
		return SPH_RANK_SPH_RANK_FIELDMASK, nil
	case "SPH_RANK_SPH_RANK_SPH04":
		return SPH_RANK_SPH_RANK_SPH04, nil
	case "SPH_RANK_SPH_RANK_EXPR":
		return SPH_RANK_SPH_RANK_EXPR, nil
	case "SPH_RANK_SPH_RANK_TOTAL":
		return SPH_RANK_SPH_RANK_TOTAL, nil
	}
	return SPH_RANK(0), fmt.Errorf("not a valid SPH_RANK string")
}

func SPH_RANKPtr(v SPH_RANK) *SPH_RANK { return &v }

type SPH_SORT int64

const (
	SPH_SORT_SPH_SORT_RELEVANCE     SPH_SORT = 0
	SPH_SORT_SPH_SORT_ATTR_DESC     SPH_SORT = 1
	SPH_SORT_SPH_SORT_ATTR_ASC      SPH_SORT = 2
	SPH_SORT_SPH_SORT_TIME_SEGMENTS SPH_SORT = 3
	SPH_SORT_SPH_SORT_EXTENDED      SPH_SORT = 4
	SPH_SORT_SPH_SORT_EXPR          SPH_SORT = 5
)

func (p SPH_SORT) String() string {
	switch p {
	case SPH_SORT_SPH_SORT_RELEVANCE:
		return "SPH_SORT_SPH_SORT_RELEVANCE"
	case SPH_SORT_SPH_SORT_ATTR_DESC:
		return "SPH_SORT_SPH_SORT_ATTR_DESC"
	case SPH_SORT_SPH_SORT_ATTR_ASC:
		return "SPH_SORT_SPH_SORT_ATTR_ASC"
	case SPH_SORT_SPH_SORT_TIME_SEGMENTS:
		return "SPH_SORT_SPH_SORT_TIME_SEGMENTS"
	case SPH_SORT_SPH_SORT_EXTENDED:
		return "SPH_SORT_SPH_SORT_EXTENDED"
	case SPH_SORT_SPH_SORT_EXPR:
		return "SPH_SORT_SPH_SORT_EXPR"
	}
	return "<UNSET>"
}

func SPH_SORTFromString(s string) (SPH_SORT, error) {
	switch s {
	case "SPH_SORT_SPH_SORT_RELEVANCE":
		return SPH_SORT_SPH_SORT_RELEVANCE, nil
	case "SPH_SORT_SPH_SORT_ATTR_DESC":
		return SPH_SORT_SPH_SORT_ATTR_DESC, nil
	case "SPH_SORT_SPH_SORT_ATTR_ASC":
		return SPH_SORT_SPH_SORT_ATTR_ASC, nil
	case "SPH_SORT_SPH_SORT_TIME_SEGMENTS":
		return SPH_SORT_SPH_SORT_TIME_SEGMENTS, nil
	case "SPH_SORT_SPH_SORT_EXTENDED":
		return SPH_SORT_SPH_SORT_EXTENDED, nil
	case "SPH_SORT_SPH_SORT_EXPR":
		return SPH_SORT_SPH_SORT_EXPR, nil
	}
	return SPH_SORT(0), fmt.Errorf("not a valid SPH_SORT string")
}

func SPH_SORTPtr(v SPH_SORT) *SPH_SORT { return &v }

type SPH_GROUPBY int64

const (
	SPH_GROUPBY_SPH_GROUPBY_DAY      SPH_GROUPBY = 0
	SPH_GROUPBY_SPH_GROUPBY_WEEK     SPH_GROUPBY = 1
	SPH_GROUPBY_SPH_GROUPBY_MONTH    SPH_GROUPBY = 2
	SPH_GROUPBY_SPH_GROUPBY_YEAR     SPH_GROUPBY = 3
	SPH_GROUPBY_SPH_GROUPBY_ATTR     SPH_GROUPBY = 4
	SPH_GROUPBY_SPH_GROUPBY_ATTRPAIR SPH_GROUPBY = 5
)

func (p SPH_GROUPBY) String() string {
	switch p {
	case SPH_GROUPBY_SPH_GROUPBY_DAY:
		return "SPH_GROUPBY_SPH_GROUPBY_DAY"
	case SPH_GROUPBY_SPH_GROUPBY_WEEK:
		return "SPH_GROUPBY_SPH_GROUPBY_WEEK"
	case SPH_GROUPBY_SPH_GROUPBY_MONTH:
		return "SPH_GROUPBY_SPH_GROUPBY_MONTH"
	case SPH_GROUPBY_SPH_GROUPBY_YEAR:
		return "SPH_GROUPBY_SPH_GROUPBY_YEAR"
	case SPH_GROUPBY_SPH_GROUPBY_ATTR:
		return "SPH_GROUPBY_SPH_GROUPBY_ATTR"
	case SPH_GROUPBY_SPH_GROUPBY_ATTRPAIR:
		return "SPH_GROUPBY_SPH_GROUPBY_ATTRPAIR"
	}
	return "<UNSET>"
}

func SPH_GROUPBYFromString(s string) (SPH_GROUPBY, error) {
	switch s {
	case "SPH_GROUPBY_SPH_GROUPBY_DAY":
		return SPH_GROUPBY_SPH_GROUPBY_DAY, nil
	case "SPH_GROUPBY_SPH_GROUPBY_WEEK":
		return SPH_GROUPBY_SPH_GROUPBY_WEEK, nil
	case "SPH_GROUPBY_SPH_GROUPBY_MONTH":
		return SPH_GROUPBY_SPH_GROUPBY_MONTH, nil
	case "SPH_GROUPBY_SPH_GROUPBY_YEAR":
		return SPH_GROUPBY_SPH_GROUPBY_YEAR, nil
	case "SPH_GROUPBY_SPH_GROUPBY_ATTR":
		return SPH_GROUPBY_SPH_GROUPBY_ATTR, nil
	case "SPH_GROUPBY_SPH_GROUPBY_ATTRPAIR":
		return SPH_GROUPBY_SPH_GROUPBY_ATTRPAIR, nil
	}
	return SPH_GROUPBY(0), fmt.Errorf("not a valid SPH_GROUPBY string")
}

func SPH_GROUPBYPtr(v SPH_GROUPBY) *SPH_GROUPBY { return &v }

type SearchFilter struct {
	Attr    string  `thrift:"Attr,1" json:"Attr"`
	Values  []int32 `thrift:"Values,2" json:"Values"`
	Exclude bool    `thrift:"Exclude,3" json:"Exclude"`
}

func NewSearchFilter() *SearchFilter {
	return &SearchFilter{}
}

func (p *SearchFilter) GetAttr() string {
	return p.Attr
}

func (p *SearchFilter) GetValues() []int32 {
	return p.Values
}

func (p *SearchFilter) GetExclude() bool {
	return p.Exclude
}
func (p *SearchFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchFilter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Attr = v
	}
	return nil
}

func (p *SearchFilter) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.Values = append(p.Values, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchFilter) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Exclude = v
	}
	return nil
}

func (p *SearchFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Attr", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Attr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Attr)); err != nil {
		return fmt.Errorf("%T.Attr (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Attr: %s", p, err)
	}
	return err
}

func (p *SearchFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Values", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Values: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Values)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Values: %s", p, err)
	}
	return err
}

func (p *SearchFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exclude", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Exclude: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Exclude)); err != nil {
		return fmt.Errorf("%T.Exclude (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Exclude: %s", p, err)
	}
	return err
}

func (p *SearchFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchFilter(%+v)", *p)
}

type FilterRangeInt struct {
	Attr    string `thrift:"Attr,1" json:"Attr"`
	Min     int64  `thrift:"Min,2" json:"Min"`
	Max     int64  `thrift:"Max,3" json:"Max"`
	Exclude bool   `thrift:"Exclude,4" json:"Exclude"`
}

func NewFilterRangeInt() *FilterRangeInt {
	return &FilterRangeInt{}
}

func (p *FilterRangeInt) GetAttr() string {
	return p.Attr
}

func (p *FilterRangeInt) GetMin() int64 {
	return p.Min
}

func (p *FilterRangeInt) GetMax() int64 {
	return p.Max
}

func (p *FilterRangeInt) GetExclude() bool {
	return p.Exclude
}
func (p *FilterRangeInt) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FilterRangeInt) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Attr = v
	}
	return nil
}

func (p *FilterRangeInt) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *FilterRangeInt) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *FilterRangeInt) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Exclude = v
	}
	return nil
}

func (p *FilterRangeInt) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FilterRangeInt"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FilterRangeInt) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Attr", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Attr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Attr)); err != nil {
		return fmt.Errorf("%T.Attr (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Attr: %s", p, err)
	}
	return err
}

func (p *FilterRangeInt) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Min", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Min: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Min)); err != nil {
		return fmt.Errorf("%T.Min (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Min: %s", p, err)
	}
	return err
}

func (p *FilterRangeInt) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Max", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Max: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Max)); err != nil {
		return fmt.Errorf("%T.Max (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Max: %s", p, err)
	}
	return err
}

func (p *FilterRangeInt) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exclude", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Exclude: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Exclude)); err != nil {
		return fmt.Errorf("%T.Exclude (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Exclude: %s", p, err)
	}
	return err
}

func (p *FilterRangeInt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FilterRangeInt(%+v)", *p)
}

type FilterRangeFloat struct {
	Attr    string  `thrift:"Attr,1" json:"Attr"`
	Min     float64 `thrift:"Min,2" json:"Min"`
	Max     float64 `thrift:"Max,3" json:"Max"`
	Exclude bool    `thrift:"Exclude,4" json:"Exclude"`
}

func NewFilterRangeFloat() *FilterRangeFloat {
	return &FilterRangeFloat{}
}

func (p *FilterRangeFloat) GetAttr() string {
	return p.Attr
}

func (p *FilterRangeFloat) GetMin() float64 {
	return p.Min
}

func (p *FilterRangeFloat) GetMax() float64 {
	return p.Max
}

func (p *FilterRangeFloat) GetExclude() bool {
	return p.Exclude
}
func (p *FilterRangeFloat) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FilterRangeFloat) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Attr = v
	}
	return nil
}

func (p *FilterRangeFloat) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *FilterRangeFloat) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *FilterRangeFloat) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Exclude = v
	}
	return nil
}

func (p *FilterRangeFloat) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FilterRangeFloat"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FilterRangeFloat) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Attr", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Attr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Attr)); err != nil {
		return fmt.Errorf("%T.Attr (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Attr: %s", p, err)
	}
	return err
}

func (p *FilterRangeFloat) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Min", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Min: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Min)); err != nil {
		return fmt.Errorf("%T.Min (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Min: %s", p, err)
	}
	return err
}

func (p *FilterRangeFloat) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Max", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Max: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Max)); err != nil {
		return fmt.Errorf("%T.Max (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Max: %s", p, err)
	}
	return err
}

func (p *FilterRangeFloat) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Exclude", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Exclude: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Exclude)); err != nil {
		return fmt.Errorf("%T.Exclude (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Exclude: %s", p, err)
	}
	return err
}

func (p *FilterRangeFloat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FilterRangeFloat(%+v)", *p)
}

type SearchExcerpt struct {
	Excerpts       int32    `thrift:"Excerpts,1" json:"Excerpts"`
	ExcerptsBefore string   `thrift:"ExcerptsBefore,2" json:"ExcerptsBefore"`
	ExcerptsAfter  string   `thrift:"ExcerptsAfter,3" json:"ExcerptsAfter"`
	ExcerptsLimit  int32    `thrift:"ExcerptsLimit,4" json:"ExcerptsLimit"`
	ExcerptsFields []string `thrift:"ExcerptsFields,5" json:"ExcerptsFields"`
}

func NewSearchExcerpt() *SearchExcerpt {
	return &SearchExcerpt{}
}

func (p *SearchExcerpt) GetExcerpts() int32 {
	return p.Excerpts
}

func (p *SearchExcerpt) GetExcerptsBefore() string {
	return p.ExcerptsBefore
}

func (p *SearchExcerpt) GetExcerptsAfter() string {
	return p.ExcerptsAfter
}

func (p *SearchExcerpt) GetExcerptsLimit() int32 {
	return p.ExcerptsLimit
}

func (p *SearchExcerpt) GetExcerptsFields() []string {
	return p.ExcerptsFields
}
func (p *SearchExcerpt) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchExcerpt) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Excerpts = v
	}
	return nil
}

func (p *SearchExcerpt) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ExcerptsBefore = v
	}
	return nil
}

func (p *SearchExcerpt) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ExcerptsAfter = v
	}
	return nil
}

func (p *SearchExcerpt) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ExcerptsLimit = v
	}
	return nil
}

func (p *SearchExcerpt) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ExcerptsFields = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.ExcerptsFields = append(p.ExcerptsFields, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchExcerpt) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchExcerpt"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchExcerpt) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Excerpts", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Excerpts: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Excerpts)); err != nil {
		return fmt.Errorf("%T.Excerpts (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Excerpts: %s", p, err)
	}
	return err
}

func (p *SearchExcerpt) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExcerptsBefore", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ExcerptsBefore: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ExcerptsBefore)); err != nil {
		return fmt.Errorf("%T.ExcerptsBefore (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ExcerptsBefore: %s", p, err)
	}
	return err
}

func (p *SearchExcerpt) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExcerptsAfter", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ExcerptsAfter: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ExcerptsAfter)); err != nil {
		return fmt.Errorf("%T.ExcerptsAfter (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ExcerptsAfter: %s", p, err)
	}
	return err
}

func (p *SearchExcerpt) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExcerptsLimit", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ExcerptsLimit: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ExcerptsLimit)); err != nil {
		return fmt.Errorf("%T.ExcerptsLimit (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ExcerptsLimit: %s", p, err)
	}
	return err
}

func (p *SearchExcerpt) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExcerptsFields", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ExcerptsFields: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ExcerptsFields)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ExcerptsFields {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ExcerptsFields: %s", p, err)
	}
	return err
}

func (p *SearchExcerpt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchExcerpt(%+v)", *p)
}

type SearchOptions struct {
	Host              string              `thrift:"Host,1" json:"Host"`
	Port              int32               `thrift:"Port,2" json:"Port"`
	Timeout           int32               `thrift:"Timeout,3" json:"Timeout"`
	Offset            int32               `thrift:"Offset,4" json:"Offset"`
	Limit             int32               `thrift:"Limit,5" json:"Limit"`
	MaxMatches        int32               `thrift:"MaxMatches,6" json:"MaxMatches"`
	MatchMode         SPH_MATCH           `thrift:"MatchMode,7" json:"MatchMode"`
	RankMode          SPH_RANK            `thrift:"RankMode,8" json:"RankMode"`
	SortMode          SPH_SORT            `thrift:"SortMode,9" json:"SortMode"`
	SortBy            string              `thrift:"SortBy,10" json:"SortBy"`
	FieldWeights      map[string]int32    `thrift:"FieldWeights,11" json:"FieldWeights"`
	Filters           []*SearchFilter     `thrift:"Filters,12" json:"Filters"`
	FilterRangeInts   []*FilterRangeInt   `thrift:"FilterRangeInts,13" json:"FilterRangeInts"`
	FilterRangeFloats []*FilterRangeFloat `thrift:"FilterRangeFloats,14" json:"FilterRangeFloats"`
	Excerpts          *SearchExcerpt      `thrift:"Excerpts,15" json:"Excerpts"`
}

func NewSearchOptions() *SearchOptions {
	return &SearchOptions{}
}

func (p *SearchOptions) GetHost() string {
	return p.Host
}

func (p *SearchOptions) GetPort() int32 {
	return p.Port
}

func (p *SearchOptions) GetTimeout() int32 {
	return p.Timeout
}

func (p *SearchOptions) GetOffset() int32 {
	return p.Offset
}

func (p *SearchOptions) GetLimit() int32 {
	return p.Limit
}

func (p *SearchOptions) GetMaxMatches() int32 {
	return p.MaxMatches
}

func (p *SearchOptions) GetMatchMode() SPH_MATCH {
	return p.MatchMode
}

func (p *SearchOptions) GetRankMode() SPH_RANK {
	return p.RankMode
}

func (p *SearchOptions) GetSortMode() SPH_SORT {
	return p.SortMode
}

func (p *SearchOptions) GetSortBy() string {
	return p.SortBy
}

func (p *SearchOptions) GetFieldWeights() map[string]int32 {
	return p.FieldWeights
}

func (p *SearchOptions) GetFilters() []*SearchFilter {
	return p.Filters
}

func (p *SearchOptions) GetFilterRangeInts() []*FilterRangeInt {
	return p.FilterRangeInts
}

func (p *SearchOptions) GetFilterRangeFloats() []*FilterRangeFloat {
	return p.FilterRangeFloats
}

var SearchOptions_Excerpts_DEFAULT *SearchExcerpt

func (p *SearchOptions) GetExcerpts() *SearchExcerpt {
	if !p.IsSetExcerpts() {
		return SearchOptions_Excerpts_DEFAULT
	}
	return p.Excerpts
}
func (p *SearchOptions) IsSetExcerpts() bool {
	return p.Excerpts != nil
}

func (p *SearchOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *SearchOptions) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *SearchOptions) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Timeout = v
	}
	return nil
}

func (p *SearchOptions) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *SearchOptions) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *SearchOptions) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.MaxMatches = v
	}
	return nil
}

func (p *SearchOptions) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		temp := SPH_MATCH(v)
		p.MatchMode = temp
	}
	return nil
}

func (p *SearchOptions) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		temp := SPH_RANK(v)
		p.RankMode = temp
	}
	return nil
}

func (p *SearchOptions) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		temp := SPH_SORT(v)
		p.SortMode = temp
	}
	return nil
}

func (p *SearchOptions) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.SortBy = v
	}
	return nil
}

func (p *SearchOptions) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int32, size)
	p.FieldWeights = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.FieldWeights[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SearchOptions) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SearchFilter, 0, size)
	p.Filters = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &SearchFilter{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.Filters = append(p.Filters, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchOptions) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FilterRangeInt, 0, size)
	p.FilterRangeInts = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &FilterRangeInt{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.FilterRangeInts = append(p.FilterRangeInts, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchOptions) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FilterRangeFloat, 0, size)
	p.FilterRangeFloats = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &FilterRangeFloat{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.FilterRangeFloats = append(p.FilterRangeFloats, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchOptions) ReadField15(iprot thrift.TProtocol) error {
	p.Excerpts = &SearchExcerpt{}
	if err := p.Excerpts.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Excerpts, err)
	}
	return nil
}

func (p *SearchOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchOptions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Host", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Host: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return fmt.Errorf("%T.Host (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Host: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Port", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Port: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return fmt.Errorf("%T.Port (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Port: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Timeout", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Timeout: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Timeout)); err != nil {
		return fmt.Errorf("%T.Timeout (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Timeout: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Offset", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Offset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return fmt.Errorf("%T.Offset (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Offset: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Limit", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:Limit: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return fmt.Errorf("%T.Limit (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:Limit: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MaxMatches", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:MaxMatches: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxMatches)); err != nil {
		return fmt.Errorf("%T.MaxMatches (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:MaxMatches: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MatchMode", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:MatchMode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MatchMode)); err != nil {
		return fmt.Errorf("%T.MatchMode (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:MatchMode: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RankMode", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:RankMode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.RankMode)); err != nil {
		return fmt.Errorf("%T.RankMode (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:RankMode: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SortMode", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:SortMode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.SortMode)); err != nil {
		return fmt.Errorf("%T.SortMode (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:SortMode: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SortBy", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:SortBy: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SortBy)); err != nil {
		return fmt.Errorf("%T.SortBy (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:SortBy: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FieldWeights", thrift.MAP, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:FieldWeights: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.FieldWeights)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.FieldWeights {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:FieldWeights: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Filters", thrift.LIST, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:Filters: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Filters)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Filters {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:Filters: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FilterRangeInts", thrift.LIST, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:FilterRangeInts: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FilterRangeInts)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FilterRangeInts {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:FilterRangeInts: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FilterRangeFloats", thrift.LIST, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:FilterRangeFloats: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FilterRangeFloats)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FilterRangeFloats {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:FilterRangeFloats: %s", p, err)
	}
	return err
}

func (p *SearchOptions) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Excerpts", thrift.STRUCT, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:Excerpts: %s", p, err)
	}
	if err := p.Excerpts.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Excerpts, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:Excerpts: %s", p, err)
	}
	return err
}

func (p *SearchOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchOptions(%+v)", *p)
}

type SearchResult_ struct {
	Total   int32   `thrift:"Total,1" json:"Total"`
	DocIds  []int64 `thrift:"DocIds,2" json:"DocIds"`
	ErrorA1 string  `thrift:"Error,3" json:"Error"`
}

func NewSearchResult_() *SearchResult_ {
	return &SearchResult_{}
}

func (p *SearchResult_) GetTotal() int32 {
	return p.Total
}

func (p *SearchResult_) GetDocIds() []int64 {
	return p.DocIds
}

func (p *SearchResult_) GetErrorA1() string {
	return p.ErrorA1
}
func (p *SearchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *SearchResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.DocIds = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.DocIds = append(p.DocIds, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *SearchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Total", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Total: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return fmt.Errorf("%T.Total (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Total: %s", p, err)
	}
	return err
}

func (p *SearchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DocIds", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:DocIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DocIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DocIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:DocIds: %s", p, err)
	}
	return err
}

func (p *SearchResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Error", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Error: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
		return fmt.Errorf("%T.Error (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Error: %s", p, err)
	}
	return err
}

func (p *SearchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchResult_(%+v)", *p)
}
